<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	
	<beans:bean class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">
      <beans:property name="locations">
         <beans:list>
         	<beans:value>classpath:/kakaoAuth.properties</beans:value>
            <beans:value>classpath:/db-config/email.properties</beans:value>
         </beans:list>
      </beans:property>
   </beans:bean>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/img/**" location="/resources/img/" />
	<resources mapping="/js/**" location="/resources/js/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.spring.hospital" />
	
	
	<!-- interceptor-config에 따로 저장 -->
	<!-- <interceptors>
		<interceptor>
			<mapping path="/user/login"/>
			<beans:bean class="com.spring.myweb.util.UserLoginSuccessHandler" />
		</interceptor>
	</interceptors> -->
	
	<!-- 파일 업로드 -->
	<!-- 
		id를 multipartResolver로 선언.
		Multipart 형식으로 전달되는 데이터를 스프링 mvc에서 사용할 수 있도록 변환해주는 객체.
	 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	
		<!-- 최대 업로드 가능한 바이트 크기(바이트 단위), -1은 제한이 없음을 의미 -->
		<beans:property name="maxUploadSize" value="10485760" />
		
		<!-- 업로드 요청을 반환할 때 사용할 문자 인코딩 방식 -->
		<beans:property name="defaultEncoding" value="utf-8" />
		
	</beans:bean>
	
	
	<!-- 
		공통 로그들, 예외 처리 내용들을 기존 클래스와 분리하여 객체 지향적으로 사용하기 위해
		Aspect(공통 로직들)와 Target(적용 시킬 타겟: Service 클래스들, 메서드들)을 연결할 수 있도록
		가상 환경을 구축해주고, 아노테이션을 제공하는 빈.
	 -->
	<aop:aspectj-autoproxy />
	
	<beans:bean id="autoLoginInterceptor" class="com.spring.hospital.util.interceptor.AutoLoginIntercepter" />
	<beans:bean id="joinAgreeInterceptor" class="com.spring.hospital.util.interceptor.JoinAgreeIntercepter" />
	<interceptors>
		<interceptor>
			<mapping path="/"/>
			<beans:ref bean="autoLoginInterceptor"/>
		</interceptor>
		<interceptor>
			<mapping path="/user/userJoin"/>
			<beans:ref bean="joinAgreeInterceptor"/>
		</interceptor>
	</interceptors>
	
</beans:beans>
